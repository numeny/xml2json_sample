diff --git a/samples/src/MemParse/MemParse.cpp b/samples/src/MemParse/MemParse.cpp
index 61fa66706..6819c7f55 100644
--- a/samples/src/MemParse/MemParse.cpp
+++ b/samples/src/MemParse/MemParse.cpp
@@ -67,7 +67,9 @@
    #endif
 #endif /* ifndef MEMPARSE_ENCODING */
 
-static const char*  gXMLInMemBuf =
+#define MEMPARSE_ENCODING "utf8"
+#if 0
+const char*  gXMLInMemBuf =
 "\
 <?xml version='1.0' encoding='" MEMPARSE_ENCODING "'?>\n\
 <!DOCTYPE company [\n\
@@ -78,13 +80,48 @@ static const char*  gXMLInMemBuf =
 <!ELEMENT developedAt (#PCDATA)>\n\
 ]>\n\n\
 <company>\n\
-    <product>XML4C</product>\n\
+    <product>美丽</product>\n\
     <category idea='great'>XML Parsing Tools</category>\n\
     <developedAt>\n\
       IBM Center for Java Technology, Silicon Valley, Cupertino, CA\n\
     </developedAt>\n\
 </company>\
 ";
+#else
+#if 1
+const char*  gXMLInMemBuf =
+"\
+<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n\
+<worksheet xmlns='http://schemas.openxmlformats.org/spreadsheetml/2006/main' xmlns:r='http://schemas.openxmlformats.org/officeDocument/2006/relationships' xmlns:xdr='http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing' xmlns:x14='http://schemas.microsoft.com/office/spreadsheetml/2009/9/main' xmlns:mc='http://schemas.openxmlformats.org/markup-compatibility/2006' xmlns:etc='http://www.wps.cn/officeDocument/2017/etCustomData'>\n\
+    <sheetPr>\n\
+        <pageSetUpPr fitToPage='1'/>\n\
+    </sheetPr>\n\
+    <dimension ref='A1:CE100'/>\n\
+    <sheetViews>\n\
+        <sheetView zoomScale='70' zoomScaleNormal='70' zoomScaleSheetLayoutView='50' workbookViewId='0'>\n\
+            <selection activeCell='D47' sqref='A1:CD100'/>\n\
+        </sheetView>\n\
+    </sheetViews>\n\
+    <sheetFormatPr defaultColWidth='9' defaultRowHeight='15.75' customHeight='1'/>\n\
+    <cols>\n\
+        <col min='1' max='1' width='6.16153846153846' style='14' customWidth='1'/>\n\
+        <col min='83' max='16384' width='9' style='11'/>\n\
+    </cols>\n\
+    <sheetData>mmm</sheetData>\n\
+    <legacyDrawing />\n\
+</worksheet>\n\
+";
+#else
+const char*  gXMLInMemBuf =
+"\
+<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n\
+<worksheet>\n\
+<a/>\n\
+<b>mm</b>\n\
+</worksheet>\n\
+";
+#endif
+#endif
 
 static const char*  gMemBufId = "prodInfo";
 
@@ -253,6 +290,12 @@ int main(int argC, char* argV[])
              << StrX(e.getMessage()) << "\n" << XERCES_STD_QUALIFIER endl;
         errorCode = 4;
     }
+    catch (const UserInterruption& e)
+    {
+        XERCES_STD_QUALIFIER cerr << "\nUserInterruption: " << e.mCode << XERCES_STD_QUALIFIER endl;
+        errorCode = 4;
+    }
+    
     if(errorCode) {
         XMLPlatformUtils::Terminate();
         return errorCode;
diff --git a/samples/src/MemParse/MemParseHandlers.cpp b/samples/src/MemParse/MemParseHandlers.cpp
index ee91ce73b..d867a0053 100644
--- a/samples/src/MemParse/MemParseHandlers.cpp
+++ b/samples/src/MemParse/MemParseHandlers.cpp
@@ -29,7 +29,78 @@
 #include <xercesc/sax/AttributeList.hpp>
 #include <xercesc/sax/SAXParseException.hpp>
 #include <xercesc/sax/SAXException.hpp>
-
+#include <iostream>
+#include <stdio.h>
+
+extern const char*  gXMLInMemBuf;
+using namespace std;
+
+void XMLChToUtf8(string& utf8str, const XMLCh* u16str, bool escapedEnter = true) {
+    if (nullptr == u16str) {
+        return;
+    }
+    char tmpChar;
+    for (size_t i = 0; u16str[i] != u'\0';) {
+        char32_t codepoint = u16str[i++];
+
+        if (codepoint >= 0xD800 && codepoint <= 0xDBFF && u16str[i] >= 0xDC00 && u16str[i] <= 0xDFFF) {
+            // Surrogate pair handling
+            codepoint = 0x10000 + ((codepoint - 0xD800) << 10) + (u16str[i++] - 0xDC00);
+        }
+        if (codepoint <= 0x7F) {
+            tmpChar = static_cast<char>(codepoint);
+            if ((codepoint >= 0x00 && codepoint <= 0x08)
+                || (codepoint >= 0x0B && codepoint <= 0x0C)
+                || (codepoint >= 0x0E && codepoint <= 0x1F)
+                || codepoint == 0x7F) {
+                // controle charactor, ignore, \\x00-\\x08\\x0b-\\x0c\\x0e-\\x1f\\x7f
+                continue;
+            }
+            switch (tmpChar) {
+            // handle escaped chars
+            case '\"':
+                utf8str += "\\\"";
+                break;
+            case '\\':
+                utf8str += "\\\\";
+                break;
+            default:
+                if (escapedEnter) {
+                    // handle escaped chars
+                    switch (tmpChar) {
+                        case '\n': // "\n" --> "\\n"
+                            utf8str += "\\n";
+                            break;
+                        case '\r': // "\r" --> "\\r"
+                            utf8str += "\\r";
+                            break;
+                        default:
+                            utf8str += tmpChar;
+                            break;
+                    }
+                } else {
+                    utf8str += tmpChar;
+                }
+                break;
+            }
+        }
+        else if (codepoint <= 0x7FF) {
+            utf8str += static_cast<char>((codepoint >> 6) | 0xC0);
+            utf8str += static_cast<char>((codepoint & 0x3F) | 0x80);
+        }
+        else if (codepoint <= 0xFFFF) {
+            utf8str += static_cast<char>((codepoint >> 12) | 0xE0);
+            utf8str += static_cast<char>(((codepoint >> 6) & 0x3F) | 0x80);
+            utf8str += static_cast<char>((codepoint & 0x3F) | 0x80);
+        }
+        else if (codepoint <= 0x10FFFF) {
+            utf8str += static_cast<char>((codepoint >> 18) | 0xF0);
+            utf8str += static_cast<char>(((codepoint >> 12) & 0x3F) | 0x80);
+            utf8str += static_cast<char>(((codepoint >> 6) & 0x3F) | 0x80);
+            utf8str += static_cast<char>((codepoint & 0x3F) | 0x80);
+        }
+    }
+}
 
 
 // ---------------------------------------------------------------------------
@@ -47,16 +118,19 @@ MemParseHandlers::~MemParseHandlers()
 {
 }
 
-
 // ---------------------------------------------------------------------------
 //  MemParseHandlers: Implementation of the SAX DocumentHandler interface
 // ---------------------------------------------------------------------------
 void MemParseHandlers::startElement(const   XMLCh* const    /* name */
                                     ,       AttributeList&  attributes)
 {
+    // throw UserInterruption();
     fElementCount++;
     fAttrCount += attributes.getLength();
 }
+void MemParseHandlers::endElement(const XMLCh* const name)
+{
+}
 
 void MemParseHandlers::characters(  const   XMLCh* const    /* chars */
                                     , const XMLSize_t    length)
diff --git a/samples/src/MemParse/MemParseHandlers.hpp b/samples/src/MemParse/MemParseHandlers.hpp
index 741189a45..d2616a9c2 100644
--- a/samples/src/MemParse/MemParseHandlers.hpp
+++ b/samples/src/MemParse/MemParseHandlers.hpp
@@ -32,6 +32,11 @@ class AttributeList;
 XERCES_CPP_NAMESPACE_END
 
 
+class UserInterruption {
+public:
+    int mCode = 99;
+};
+
 class MemParseHandlers : public HandlerBase
 {
 public:
@@ -70,6 +75,8 @@ public:
     //  Handlers for the SAX DocumentHandler interface
     // -----------------------------------------------------------------------
     void startElement(const XMLCh* const name, AttributeList& attributes);
+    void endElement(const XMLCh* const name) override;
+
     void characters(const XMLCh* const chars, const XMLSize_t length);
     void ignorableWhitespace(const XMLCh* const chars, const XMLSize_t length);
     void resetDocument();
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index a168db125..382bd50af 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1276,6 +1276,12 @@ if(XERCES_USE_NETACCESSOR_CURL)
   target_include_directories(xerces-c SYSTEM PRIVATE ${CURL_INCLUDE_DIRS})
 endif()
 
+# start by bdg, static lib
+add_library(xerces-c-static STATIC
+  ${libxerces_c_SOURCES}
+  ${libxerces_c_RESOURCES})
+# end by bdg, static lib
+
 if(MSVC)
   # Add configuration-specific library name to resource file.
   target_compile_definitions(xerces-c PRIVATE "XERCES_DLL_NAME=\"$<TARGET_FILE_NAME:xerces-c>\\0\"")
diff --git a/src/xercesc/framework/XMLElementDecl.hpp b/src/xercesc/framework/XMLElementDecl.hpp
index 450136236..83e9d1457 100644
--- a/src/xercesc/framework/XMLElementDecl.hpp
+++ b/src/xercesc/framework/XMLElementDecl.hpp
@@ -102,8 +102,6 @@ class XMLPARSER_EXPORT XMLElementDecl : public XSerializable, public XMemory
     static const unsigned int   fgPCDataElemId;
     static const XMLCh          fgPCDataElemName[];
 
-
-
     // -----------------------------------------------------------------------
     //  Destructor
     // -----------------------------------------------------------------------
diff --git a/src/xercesc/internal/IGXMLScanner.cpp b/src/xercesc/internal/IGXMLScanner.cpp
index 912ec0c62..e820a0dbd 100644
--- a/src/xercesc/internal/IGXMLScanner.cpp
+++ b/src/xercesc/internal/IGXMLScanner.cpp
@@ -44,6 +44,7 @@
 #include <xercesc/validators/schema/identity/IdentityConstraintHandler.hpp>
 #include <xercesc/validators/schema/identity/IC_Selector.hpp>
 #include <xercesc/util/OutOfMemoryException.hpp>
+#include <iostream>
 
 XERCES_CPP_NAMESPACE_BEGIN
 
@@ -2104,6 +2105,11 @@ bool IGXMLScanner::scanStartTag(bool& gotData)
     return true;
 }
 
+// start bisheng, add by bdg
+size_t IGXMLScanner::totalSizeOfContentHasRead() {
+    return fReaderMgr.totalSizeOfContentHasRead();
+}
+// end bisheng
 
 //  This method is called to scan a start tag when we are processing
 //  namespaces. There are two different versions of this method, one for
diff --git a/src/xercesc/internal/IGXMLScanner.hpp b/src/xercesc/internal/IGXMLScanner.hpp
index d3e1046a0..4207d92af 100644
--- a/src/xercesc/internal/IGXMLScanner.hpp
+++ b/src/xercesc/internal/IGXMLScanner.hpp
@@ -93,7 +93,9 @@ public :
 
     virtual void resetCachedGrammar ();
     virtual Grammar::GrammarType getCurrentGrammarType() const;
-
+    // start bisheng, add by bdg
+    virtual size_t totalSizeOfContentHasRead() override;
+    // end bisheng
 private :
     // -----------------------------------------------------------------------
     //  Unimplemented constructors and operators
diff --git a/src/xercesc/internal/ReaderMgr.cpp b/src/xercesc/internal/ReaderMgr.cpp
index d14483e3c..8a86f7868 100644
--- a/src/xercesc/internal/ReaderMgr.cpp
+++ b/src/xercesc/internal/ReaderMgr.cpp
@@ -42,6 +42,7 @@
 #include <xercesc/internal/ReaderMgr.hpp>
 #include <xercesc/util/OutOfMemoryException.hpp>
 #include <xercesc/util/XMLResourceIdentifier.hpp>
+#include <iostream>
 
 XERCES_CPP_NAMESPACE_BEGIN
 
@@ -171,6 +172,16 @@ XMLCh ReaderMgr::peekNextChar()
     return chRet;
 }
 
+// start bisheng, by bdg
+size_t ReaderMgr::totalSizeOfContentHasRead()
+{
+    if (!fCurReader) {
+        std::cerr << "Err: ReaderMgr::totalSizeOfContentHasRead, fCurReader is null." << std::endl;
+        return 0;
+    }
+    return fCurReader->totalSizeOfContentHasRead();
+}
+// end bisheng
 
 bool ReaderMgr::skippedChar(const XMLCh toCheck)
 {
diff --git a/src/xercesc/internal/ReaderMgr.hpp b/src/xercesc/internal/ReaderMgr.hpp
index f63b2194e..90178b227 100644
--- a/src/xercesc/internal/ReaderMgr.hpp
+++ b/src/xercesc/internal/ReaderMgr.hpp
@@ -194,6 +194,9 @@ public :
     virtual XMLFileLoc getLineNumber() const;
     virtual XMLFileLoc getColumnNumber() const;
 
+    // start bisheng, add by bdg
+    virtual size_t totalSizeOfContentHasRead();
+    // end bisheng
 
 private :
     // -----------------------------------------------------------------------
diff --git a/src/xercesc/internal/XMLReader.cpp b/src/xercesc/internal/XMLReader.cpp
index 405474a02..285d64f14 100644
--- a/src/xercesc/internal/XMLReader.cpp
+++ b/src/xercesc/internal/XMLReader.cpp
@@ -31,6 +31,7 @@
 #include <xercesc/util/XMLEBCDICTranscoder.hpp>
 #include <xercesc/util/XMLString.hpp>
 #include <xercesc/util/Janitor.hpp>
+#include <iostream>
 
 XERCES_CPP_NAMESPACE_BEGIN
 
@@ -121,6 +122,9 @@ XMLReader::XMLReader(const  XMLCh* const          pubId
     , fTranscoder(0)
     , fType(type)
     , fMemoryManager(manager)
+    // start bisheng, add by bdg
+    , fTotalReadBytes(0)
+    // end bisheng
 {
     setXMLVersion(version);
 
@@ -204,6 +208,9 @@ XMLReader::XMLReader(const  XMLCh* const          pubId
     , fTranscoder(0)
     , fType(type)
     , fMemoryManager(manager)
+    // start bisheng, add by bdg
+    , fTotalReadBytes(0)
+    // end bisheng
 {
     setXMLVersion(version);
 
@@ -235,6 +242,9 @@ XMLReader::XMLReader(const  XMLCh* const          pubId
                  ((fRawByteBuf[0] == 0xFF) && (fRawByteBuf[1] == 0xFE) && (fRawByteBuf[2] == 0x00) && (fRawByteBuf[3] == 0x00)))  )
             {
                 fRawBufIndex += 4;
+                // start bisheng, add by bdg
+                increaseTotalReadBytes(4);
+                // end bisheng
             }
             break;
         }
@@ -249,6 +259,9 @@ XMLReader::XMLReader(const  XMLCh* const          pubId
                                             , XMLRecognizer::fgUTF8BOMLen) == 0)
             {
                 fRawBufIndex += XMLRecognizer::fgUTF8BOMLen;
+                // start bisheng, add by bdg
+                increaseTotalReadBytes(XMLRecognizer::fgUTF8BOMLen);
+                // end bisheng
             }
             break;
         }
@@ -262,6 +275,9 @@ XMLReader::XMLReader(const  XMLCh* const          pubId
             if ((*asUTF16 == chUnicodeMarker) || (*asUTF16 == chSwappedUnicodeMarker))
             {
                 fRawBufIndex += sizeof(UTF16Ch);
+                // start bisheng, add by bdg
+                increaseTotalReadBytes(sizeof(UTF16Ch));
+                // end bisheng
             }
             break;
         }
@@ -387,6 +403,9 @@ XMLReader::XMLReader(const  XMLCh* const          pubId
     , fTranscoder(0)
     , fType(type)
     , fMemoryManager(manager)
+    // start bisheng, add by bdg
+    , fTotalReadBytes(0)
+    // end bisheng
 {
     setXMLVersion(version);
 
@@ -1462,6 +1481,22 @@ void XMLReader::checkForSwapped()
     }
 }
 
+// start bisheng, add by bdg
+size_t XMLReader::totalSizeOfContentHasRead() {
+    if (!fStream) {
+        std::cerr << "Err: XMLReader::totalSizeOfContentHasRead: fStream is null." << std::endl;
+        return 0;
+    }
+
+    size_t numCharLeftNotRead = 0;
+    for (size_t idx = fCharIndex; idx < fCharsAvail; idx++) {
+        numCharLeftNotRead += fCharSizeBuf[idx];
+    }
+    size_t total = fTotalReadBytes - numCharLeftNotRead;
+
+    return total;
+}
+// end bisheng
 
 //
 //  This is called from the constructor when the encoding is not forced.
@@ -1498,6 +1533,9 @@ void XMLReader::doInitDecode()
                 if (fRawBufIndex + sizeof(UCS4Ch) > fRawBytesAvail) {
                     fCharsAvail = 0;
                     fRawBufIndex = 0;
+                    // start bisheng, add by bdg
+                    resetTotalReadBytes();
+                    // end bisheng
                     fMemoryManager->deallocate(fPublicId);
                     fMemoryManager->deallocate(fEncodingStr);
                     ArrayJanitor<XMLCh> janValue(fSystemId, fMemoryManager);
@@ -1515,6 +1553,9 @@ void XMLReader::doInitDecode()
                 if (fCharsAvail == kCharBufSize - 1) {
                     fCharsAvail = 0;
                     fRawBufIndex = 0;
+                    // start bisheng, add by bdg
+                    resetTotalReadBytes();
+                    // end bisheng
                     fMemoryManager->deallocate(fPublicId);
                     fMemoryManager->deallocate(fEncodingStr);
                     ArrayJanitor<XMLCh> janValue(fSystemId, fMemoryManager);
@@ -1530,6 +1571,9 @@ void XMLReader::doInitDecode()
                 // Get out the current 4 byte value and inc our raw buf index
                 UCS4Ch curVal = *asUCS++;
                 fRawBufIndex += sizeof(UCS4Ch);
+                // start bisheng, add by bdg
+                increaseTotalReadBytes(sizeof(UCS4Ch));
+                // end bisheng
 
                 // Swap if that is required for this machine
                 if (fSwapped)
@@ -1540,6 +1584,10 @@ void XMLReader::doInitDecode()
                 {
                     fCharsAvail = 0;
                     fRawBufIndex = 0;
+                    // start bisheng, add by bdg
+                    resetTotalReadBytes();
+                    // end bisheng
+
                     fMemoryManager->deallocate(fPublicId);
                     fMemoryManager->deallocate(fEncodingStr);
                     ArrayJanitor<XMLCh> janValue(fSystemId, fMemoryManager);
@@ -1579,6 +1627,9 @@ void XMLReader::doInitDecode()
                                             , XMLRecognizer::fgUTF8BOMLen) == 0)
             {
                 fRawBufIndex += XMLRecognizer::fgUTF8BOMLen;
+                // start bisheng, add by bdg
+                increaseTotalReadBytes(XMLRecognizer::fgUTF8BOMLen);
+                // end bisheng
                 asChars      += XMLRecognizer::fgUTF8BOMLen;
             }
 
@@ -1602,12 +1653,18 @@ void XMLReader::doInitDecode()
             {
                 const char curCh = *asChars++;
                 fRawBufIndex++;
+                // start bisheng, add by bdg
+                increaseTotalReadBytes(1);
+                // end bisheng
 
                 // Make sure we don't exhaust the limited prolog buffer size.
                 // Leave room for a space added at the end of this function.
                 if (fCharsAvail == kCharBufSize - 1) {
                     fCharsAvail = 0;
                     fRawBufIndex = 0;
+                    // start bisheng, add by bdg
+                    resetTotalReadBytes();
+                    // end bisheng
                     fMemoryManager->deallocate(fPublicId);
                     fMemoryManager->deallocate(fEncodingStr);
                     ArrayJanitor<XMLCh> janValue(fSystemId, fMemoryManager);
@@ -1636,6 +1693,10 @@ void XMLReader::doInitDecode()
                 {
                     fCharsAvail = 0;
                     fRawBufIndex = 0;
+                    // start bisheng, add by bdg
+                    resetTotalReadBytes();
+                    // end bisheng
+
                     fMemoryManager->deallocate(fPublicId);
                     fMemoryManager->deallocate(fEncodingStr);
                     ArrayJanitor<XMLCh> janValue(fSystemId, fMemoryManager);
@@ -1667,6 +1728,9 @@ void XMLReader::doInitDecode()
             if ((*asUTF16 == chUnicodeMarker) || (*asUTF16 == chSwappedUnicodeMarker))
             {
                 fRawBufIndex += sizeof(UTF16Ch);
+                // start bisheng, add by bdg
+                increaseTotalReadBytes(sizeof(UTF16Ch));
+                // end bisheng
                 asUTF16++;
                 postBOMIndex = fRawBufIndex;
             }
@@ -1677,6 +1741,9 @@ void XMLReader::doInitDecode()
             if (fRawBytesAvail - fRawBufIndex < XMLRecognizer::fgUTF16PreLen)
             {
                 fRawBufIndex = postBOMIndex;
+                // start bisheng, add by bdg, bisheng FIXME
+                // increaseTotalReadBytes(postBOMIndex);
+                // end bisheng
                 break;
             }
 
@@ -1689,6 +1756,9 @@ void XMLReader::doInitDecode()
                 if (memcmp(asUTF16, XMLRecognizer::fgUTF16BPre, XMLRecognizer::fgUTF16PreLen))
                 {
                     fRawBufIndex = postBOMIndex;
+                    // start bisheng, add by bdg, bisheng FIXME
+                    // increaseTotalReadBytes(postBOMIndex);
+                    // end bisheng
                     break;
                 }
             }
@@ -1697,6 +1767,9 @@ void XMLReader::doInitDecode()
                 if (memcmp(asUTF16, XMLRecognizer::fgUTF16LPre, XMLRecognizer::fgUTF16PreLen))
                 {
                     fRawBufIndex = postBOMIndex;
+                    // start bisheng, add by bdg, bisheng FIXME
+                    // increaseTotalReadBytes(postBOMIndex);
+                    // end bisheng
                     break;
                 }
             }
@@ -1707,6 +1780,9 @@ void XMLReader::doInitDecode()
                 if (fRawBufIndex + sizeof(UTF16Ch) > fRawBytesAvail) {
                     fCharsAvail = 0;
                     fRawBufIndex = 0;
+                    // start bisheng, add by bdg
+                    resetTotalReadBytes();
+                    // end bisheng
                     fMemoryManager->deallocate(fPublicId);
                     fMemoryManager->deallocate(fEncodingStr);
                     ArrayJanitor<XMLCh> janValue(fSystemId, fMemoryManager);
@@ -1724,6 +1800,9 @@ void XMLReader::doInitDecode()
                 if (fCharsAvail == kCharBufSize - 1) {
                     fCharsAvail = 0;
                     fRawBufIndex = 0;
+                    // start bisheng, add by bdg
+                    resetTotalReadBytes();
+                    // end bisheng
                     fMemoryManager->deallocate(fPublicId);
                     fMemoryManager->deallocate(fEncodingStr);
                     ArrayJanitor<XMLCh> janValue(fSystemId, fMemoryManager);
@@ -1739,6 +1818,9 @@ void XMLReader::doInitDecode()
                 // Get out the current 2 byte value
                 UTF16Ch curVal = *asUTF16++;
                 fRawBufIndex += sizeof(UTF16Ch);
+                // start bisheng, add by bdg
+                increaseTotalReadBytes(sizeof(UTF16Ch));
+                // end bisheng
 
                 // Swap if that is required for this machine
                 if (fSwapped)
@@ -1770,12 +1852,18 @@ void XMLReader::doInitDecode()
                 // Transcode one char from the source
                 const XMLCh chCur = XMLEBCDICTranscoder::xlatThisOne(*srcPtr++);
                 fRawBufIndex++;
+                // start bisheng, add by bdg
+                increaseTotalReadBytes(1);
+                // end bisheng
 
                 // Make sure we don't exhaust the limited prolog buffer size.
                 // Leave room for a space added at the end of this function.
                 if (fCharsAvail == kCharBufSize - 1) {
                     fCharsAvail = 0;
                     fRawBufIndex = 0;
+                    // start bisheng, add by bdg
+                    resetTotalReadBytes();
+                    // end bisheng
                     fMemoryManager->deallocate(fPublicId);
                     fMemoryManager->deallocate(fEncodingStr);
                     ArrayJanitor<XMLCh> janValue(fSystemId, fMemoryManager);
@@ -1935,8 +2023,12 @@ XMLReader::xcodeMoreChars(          XMLCh* const            bufToFill
 
         if (bytesEaten == 0)
             needMode = true;
-        else
+        else {
             fRawBufIndex += bytesEaten;
+            // start bisheng, add by bdg
+            increaseTotalReadBytes(bytesEaten);
+            // end bisheng
+        }
     }
 
     return charsDone;
diff --git a/src/xercesc/internal/XMLReader.hpp b/src/xercesc/internal/XMLReader.hpp
index 966ca224d..794cf43b0 100644
--- a/src/xercesc/internal/XMLReader.hpp
+++ b/src/xercesc/internal/XMLReader.hpp
@@ -467,6 +467,17 @@ private:
     bool                        fNEL;
     XMLVersion                  fXMLVersion;
     MemoryManager*              fMemoryManager;
+    // start bisheng, add by bdg
+    XMLSize_t                   fTotalReadBytes;
+    inline void increaseTotalReadBytes(size_t addNum) {
+        fTotalReadBytes = fTotalReadBytes + addNum;
+    }
+    inline void resetTotalReadBytes() {
+        fTotalReadBytes = 0;
+    }
+public:
+    size_t totalSizeOfContentHasRead();
+    // end bisheng
 };
 
 
diff --git a/src/xercesc/internal/XMLScanner.hpp b/src/xercesc/internal/XMLScanner.hpp
index c8bdaf1fc..2fc788f7d 100644
--- a/src/xercesc/internal/XMLScanner.hpp
+++ b/src/xercesc/internal/XMLScanner.hpp
@@ -146,6 +146,9 @@ public :
     );
     virtual ~XMLScanner();
 
+    // start bisheng, add by bdg
+    virtual size_t totalSizeOfContentHasRead() { return 0; }
+    // end bisheng
 
     // -----------------------------------------------------------------------
     //  Error emitter methods
diff --git a/src/xercesc/parsers/SAXParser.cpp b/src/xercesc/parsers/SAXParser.cpp
index 0c80a1356..a76f00b39 100644
--- a/src/xercesc/parsers/SAXParser.cpp
+++ b/src/xercesc/parsers/SAXParser.cpp
@@ -864,15 +864,14 @@ void SAXParser::endElement( const   XMLElementDecl& elemDecl
                 fElemQNameBuf.append(elemDecl.getBaseName());
                 fDocHandler->endElement(fElemQNameBuf.getRawBuffer());
             }
-            else {
+            else
                 fDocHandler->endElement(elemDecl.getBaseName());
-            }
+
         }
-        else
+        else {
             fDocHandler->endElement(elemDecl.getFullName());
-
+        }
     }
-
     //
     //  If there are any installed advanced handlers, then lets call them
     //  with this info.
@@ -1285,6 +1284,12 @@ Grammar* SAXParser::loadGrammar(const char* const systemId,
     return grammar;
 }
 
+// start bisheng, add by bdg
+size_t SAXParser::totalSizeOfContentHasRead() {
+    return fScanner ? fScanner->totalSizeOfContentHasRead() : 0;
+}
+// end bisheng
+
 Grammar* SAXParser::loadGrammar(const XMLCh* const systemId,
                                 const Grammar::GrammarType grammarType,
                                 const bool toCache)
diff --git a/src/xercesc/parsers/SAXParser.hpp b/src/xercesc/parsers/SAXParser.hpp
index 5590f2070..edfe41c32 100644
--- a/src/xercesc/parsers/SAXParser.hpp
+++ b/src/xercesc/parsers/SAXParser.hpp
@@ -2027,6 +2027,9 @@ public :
     );
     //@}
 
+    // start bisheng, add by bdg
+    size_t totalSizeOfContentHasRead();
+    // end bisheng
 protected :
     // -----------------------------------------------------------------------
     //  Protected Methods
